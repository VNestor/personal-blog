{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/my-second-post/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Victor Nestor's Blog"}},"markdownRemark":{"id":"1975faf0-d0c0-533d-a992-84e5ccf6df23","excerpt":"Introduction If you are just getting started on your programming journey, you will soon realize that you will constantly find yourself cloning, adding files…","html":"<h2>Introduction</h2>\n<p>If you are just getting started on your programming journey, you will soon realize that you will constantly find yourself cloning, adding files, committing changes, and much more. You also might be asking yourself, “what do those words mean!?”, no worries! I’ll be giving an short introduction to what they mean what’s possible with Git!</p>\n<h2>What’s the difference?</h2>\n<p>You might be asking yourself, “wait, this doesn’t look like GitHub!”, and you’re right. Git is a version control system. GitHub is a cloud-based hosting service.</p>\n<p>A <strong>version control system</strong> is software that helps you control (or manage) the different versions of something, in our it’s source code.</p>\n<p>A <strong>cloud-based hosting service</strong> is a platform that hosts infrastructures, platforms, or software by third-party providers. GitHub is a code hosting platform for version control and collaboration.</p>\n<p>Git is a version control tool.</p>\n<p>GitHub is a service that hosts Git projects.</p>\n<p>A source code manager (abbreviated as SCM) is another name for a version control system.</p>\n<p>Git is a SCM, and therefore a version control system (abbreviated as VCS)! You can check out Git’s website <a href=\"https://git-scm.com/\">here</a>.\r\nNotice how it has SCM directly in its domain.</p>\n<h2>Version Control Systems</h2>\n<p>The main point of a version control system is to <strong>help maintain a detailed history of the project as well as the ability to work on different version of it</strong>. Having a detailed history of a project is important because it lets you see the progress of the project over time. If needed, you can also jump back to any point in the project to recover data or files. This is helpful because you can revert files back to a previous state, revert the entire project back to a previous state, review changes made over time, see who last modified something that might be causing a problem, who introduced an issue and when, and much more!</p>\n<p>Since we are focusing on Git, we will go into version control systems. There are two types of version control system models:</p>\n<ul>\n<li>\n<p><strong>The centralized model</strong>:</p>\n<ul>\n<li>All users connect to a central, master repository</li>\n</ul>\n</li>\n<li>\n<p><strong>The distributed model</strong>:</p>\n<ul>\n<li>Each user has the entire repository on their computer.</li>\n</ul>\n</li>\n</ul>\n<p>Git is a distributed version control system.</p>\n<p>You actually use version control in your everyday life, kind of, and no I’m not talking about Git. When you’re working with documents, like a Google Doc, you’re sort of maintaining different versions of a document as you write it. You’re not <em>actively</em> maintaining the document, but you’re computer is keeping track of the different version for you. Back to the Google Doc, have you ever noticed the small gray text at the top that tells you about the status of the document? Ever noticed that as you type, it’s actively saving the document? Then, when you’re finished typing, it tells you that the document has been saved. That’s revision history, it’s sort of like version control but it’s not powerful enough.</p>\n<p>What make version control a better option?</p>\n<ul>\n<li>The ability to label a change.</li>\n<li>The ability to give a detailed explanation of why a change was made.</li>\n<li>The ability to move between different versions of the same document.</li>\n<li>The ability to undo a change <strong>A</strong>, make edit <strong>B</strong>, then get back change <strong>A</strong> without affecting edit <strong>B</strong>.</li>\n</ul>\n<h2>Installation</h2>\n<p>You can install Git on for the following systems:</p>\n<ul>\n<li>macOS</li>\n<li>Linux / Unix</li>\n<li>Windows</li>\n</ul>\n<p>You can download Git <a href=\"https://git-scm.com/downloads\">here</a>.</p>\n<h2>Basic Git Commands</h2>\n<p>Once installed we will move to the command line interface (CLI). You can quickly access the CLI on the following systems:</p>\n<ul>\n<li>Terminal on macOS</li>\n<li>Terminal on Linux / Unix</li>\n<li>Command Prompt Windows</li>\n</ul>\n<p>Let’s verify that you’ve successfully installed Git with the following command.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">git <span class=\"token operator\">--</span>version</code></pre></div>\n<p>If successfully installed, Git will return the following message:</p>\n<blockquote>\n<p>git version <strong>version_number</strong></p>\n</blockquote>\n<p>If you don’t receive this message, you try following the installation guide <a href=\"https://git-scm.com/book/en/v2/Getting-Started-Installing-Git\">here</a>.</p>\n<h4>Set your user name and email address.</h4>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">git config <span class=\"token operator\">--</span>global user<span class=\"token punctuation\">.</span>name <span class=\"token string\">\"USERNAME\"</span>\r\ngit config <span class=\"token operator\">--</span>global user<span class=\"token punctuation\">.</span>email <span class=\"token string\">\"EMAIL@EXAMPLE.COM\"</span></code></pre></div>\n<h4>To start a new local repository.</h4>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">git init</code></pre></div>\n<h4>To add a file and to add more than one file.</h4>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">git add <span class=\"token operator\">&lt;</span>filename or directory name<span class=\"token operator\">></span>\r\ngit add <span class=\"token punctuation\">.</span></code></pre></div>\n<h4>Record the changes made to the files to a local repository with a message.</h4>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">git commit <span class=\"token operator\">-</span>m <span class=\"token string\">\"Commit message in quotes.\"</span></code></pre></div>\n<h4>Return the current state of the repository.</h4>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">git status</code></pre></div>\n<h4>Create a local working copy of an existing remote repository.</h4>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">git clone <span class=\"token operator\">&lt;</span>remote_URL<span class=\"token operator\">></span></code></pre></div>\n<h4>Fetch and merge changes on the remote server to your working directory.</h4>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">git pull</code></pre></div>\n<h4>Send changes to the master branch of your repository.</h4>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">git push origin master</code></pre></div>\n<h4>Connect to a remote repository.</h4>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">git remote add origin <span class=\"token operator\">&lt;</span>server<span class=\"token operator\">></span></code></pre></div>\n<h4>List all currently configured repositories.</h4>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">git remote <span class=\"token operator\">-</span>v</code></pre></div>\n<h4>Create a new branch and switch to it.</h4>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">git checkout <span class=\"token operator\">-</span>b <span class=\"token operator\">&lt;</span>branchname<span class=\"token operator\">></span></code></pre></div>\n<h4>Switch to another branch.</h4>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">git checkout <span class=\"token operator\">&lt;</span>branchname<span class=\"token operator\">></span></code></pre></div>\n<h4>Replace the changes in your working tree with the last content in head.</h4>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">git checkout <span class=\"token operator\">--</span> <span class=\"token operator\">&lt;</span>filename<span class=\"token operator\">></span></code></pre></div>\n<h4>List the current branch you’re in and the others in your repository.</h4>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">git branch</code></pre></div>\n<h4>Delete a branch.</h4>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">git branch <span class=\"token operator\">-</span>d <span class=\"token operator\">&lt;</span>branchname<span class=\"token operator\">></span></code></pre></div>\n<h4>Merge a different branch into your active branch.</h4>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">git merge <span class=\"token operator\">&lt;</span>branchname<span class=\"token operator\">></span></code></pre></div>\n<h4>Push the branch to your remote repository so others can use it.</h4>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">git push origin <span class=\"token operator\">&lt;</span>branchname<span class=\"token operator\">></span></code></pre></div>\n<h4>Save changes made when they’re not in a state to commit.</h4>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">git stash <span class=\"token operator\">-</span>u</code></pre></div>\n<h2>Terminology</h2>\n<p><strong>Commit</strong>: Git thinks of its data like a set of snapshots. Every time you commit, it takes a ‘picture’ of what all your files look like at that moment and stores a reference to that snapshot. Each commit has a unique ID.</p>\n<p><strong>Repository / Repo</strong>: A repository is a directory which contains your project work, as well as a few files which are used to communicate with Git. Repositories can exist either locally on your computer or as a remote copy on another computer. A repository is made up of commits.</p>\n<p><strong>Working Directory</strong>: The working directory are the files that you see in your computer’s file system. When you open your project files up on a code editor, you’re working with files in the working directory.</p>\n<p><strong>Checkout</strong>: A checkout is when content in the repository has been copied to the working directory.</p>\n<p><strong>Staging Area / Staging Index / Index</strong>: A file in the Git directory that stores information about what will go into your next commit. You can think of the staging area as a prep table where Git will take the next commit. Files on the staging index are poised to be added to the repository.</p>\n<p><strong>SHA</strong>: SHA is short for “Secure Hash Algorithm”. A SHA is a basically an ID number for each commit. Here’s what a commit’s SHA might look like:\r\n<code class=\"language-text\">e2adf8ae3e2e4ed40add75cc44cf9d0a869afeb6</code>.\r\nIt is a 40 character string compose of characters (0-9 and a-f) and calculated based on the of a file or directory structure in Git.</p>\n<p><strong>Branch</strong>: A branch is when a new line of development is created that diverges from the main line of development can continue without altering the main line.</p>\n<h2>Conclusion</h2>\n<p>Git is a very powerful tool for any developer, junior or senior. It helps maintain track of the progress you’ve made and even lets you go back to a specific point if any mistakes were made. Being able to use Git in your command line allows you to make significant changes to your remote repository with just a couple lines. Understanding what changes you’re making also helps avoid making any mistakes that might not be necessary. Hopefully this short blog helps you along your development journey. Feel free to connect with me on <a href=\"https://www.linkedin.com/in/vnestor/\">LinkedIn</a> if you ever want to get in touch!</p>","frontmatter":{"title":"Introduction To Git, Basics Commands, And Terminology","date":"March 12, 2022","description":"A simple introduction to Git and basic commands using the CLI."}},"previous":{"fields":{"slug":"/my-first-post/"},"frontmatter":{"title":"Retrieving Reviews Using The Google Places API"}},"next":null},"pageContext":{"id":"1975faf0-d0c0-533d-a992-84e5ccf6df23","previousPostId":"d0eecadf-0a51-5752-aaad-8719923be877","nextPostId":null}},
    "staticQueryHashes": ["230163734","3589320610"]}