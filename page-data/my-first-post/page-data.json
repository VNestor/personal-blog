{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/my-first-post/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Victor Nestor's Blog"}},"markdownRemark":{"id":"d0eecadf-0a51-5752-aaad-8719923be877","excerpt":"Prequel When working on a website for a small business, I wanted to have a reviews section for their website I was building using React.js. At first, I thought…","html":"<h2>Prequel</h2>\n<p>When working on a website for a small business, I wanted to have a reviews section for their website I was building using React.js. At first, I thought all I had to do was sign up for Google Cloud, get an API key, then make an API request, and I’d be done. That was not the case. Getting reviews from Google can be much simpler if you’re working with a CMS that have plugins readily available, like WordPress. This situation did not call for that, and I thought the task would be simple enough that I didn’t need to install an npm package. So I thought I’d try to figure it on my own and quickly realized that was not the case.</p>\n<h2>Getting Started</h2>\n<p>First, I needed to learn where I can get reviews from a small business that is on Google. I turned to the Google Places API because it is returns most information about a business that are registered with Google, including reviews. <strong>Note: Google Places only provide the five most recent reviews, if you need more, you might want to look elsewhere</strong>. In order to get retrieve data using the API you will need two things, an API key and the Place ID of the business you’d like to get reviews for.</p>\n<h2>Getting an API Key</h2>\n<p>You will need to do the following to get an API key:</p>\n<ul>\n<li>Create a Google Cloud Account.</li>\n<li>Create a project.</li>\n<li>Enable billing. (<em>Google Cloud provides $300 in free credits but will need a card on file.</em>)</li>\n<li>Enable the Places API.</li>\n<li>Go to the Credentials section on the Google Cloud dashboard, at the top of the screen you should see <strong>+Create Credentials</strong> and generate an API key.</li>\n</ul>\n<p>That’s it for generating an API key! This was a simple overview of the process. For a step by step process, click <a href=\"https://developers.google.com/maps/documentation/places/web-service/cloud-setup\">here</a>.</p>\n<h2>Understanding the Places API</h2>\n<p>We will be using the Places API with the following URL:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token literal-property property\">https</span><span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>maps<span class=\"token punctuation\">.</span>googleapis<span class=\"token punctuation\">.</span>com<span class=\"token operator\">/</span>maps<span class=\"token operator\">/</span>api<span class=\"token operator\">/</span>place<span class=\"token operator\">/</span>details<span class=\"token operator\">/</span>json<span class=\"token operator\">?</span>place_id<span class=\"token operator\">=</span><span class=\"token constant\">PLACE_ID</span><span class=\"token operator\">&amp;</span>key<span class=\"token operator\">=</span><span class=\"token constant\">YOUR_API_KEY</span></code></pre></div>\n<p>This will return a very large JSON file, but don’t worry because what we want is at the very end of it.\r\nSo we have our API key, now we need the Place ID. The Place ID is a unique ID that Google uses to identify a place in the Google Places database and on Google Maps. The URL above requires the place ID of the business you would like to retrieve reviews from.</p>\n<h3>Option 1</h3>\n<p>Fortunately, Google has a web service that will easily retrieve the ID for you, you can find that <a href=\"https://developers.google.com/maps/documentation/places/web-service/place-id\">here</a>. Sometimses the web service is down so there is another option.</p>\n<h3>Option 2</h3>\n<p>You can also retrieve the Place ID on Google Chrome by searching for the business on Google, ensure that the business appears on the right hand side, then right click, select <em>inspect</em>, and search for “data-pid”. It is a string of random numbers and characters and should look something like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">data<span class=\"token operator\">-</span>pid<span class=\"token operator\">=</span><span class=\"token string\">\"PLACE_ID\"</span></code></pre></div>\n<p>Great! Now you have the Place ID and your API key, let’s start making GET requests!</p>\n<h2>Making the API Call</h2>\n<p>As I mentioned earlier, I will be using React.js to make the GET request, so we will be using <em>React Hooks</em> and <em>fetch</em>. Below is a simple version of how I fetched the data from the Places API in my Reviews component. I will not get into detail about what each part of my code does. <strong>This is for educational purposes only, if you are going to deploy an application using API Keys, make sure they are hidden.</strong> If you are learning React, and not familiar with Hooks, check out React’s <a href=\"https://reactjs.org/docs/hooks-intro.html\">intro to hooks</a>.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">\r\n<span class=\"token operator\">...</span>\r\n\r\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Reviews</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>isLoading<span class=\"token punctuation\">,</span> setIsLoading<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>data<span class=\"token punctuation\">,</span> setData<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token function\">getReviews</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getReviews</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"https://maps.googleapis.com/maps/api/place/details/json?place_id=PLACE_ID&amp;key=YOUR_API_KEY\"</span><span class=\"token punctuation\">)</span>\r\n      <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\r\n      <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n        <span class=\"token function\">setData</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token function\">setIsLoading</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\r\n      <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"An Error Occured: \"</span> <span class=\"token operator\">+</span> error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\r\n\r\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\r\n    <span class=\"token operator\">...</span>\r\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Reviews<span class=\"token punctuation\">;</span></code></pre></div>\n<h3>Why Don’t We Have Access To This data?</h3>\n<p>What I want to focus on is what happens when this fetch request is made. Take a look at your console (make sure you’re using console.log), and you run into an error. If you make fetch requests often you’ve probably seen this before:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">No <span class=\"token string\">'Access-Control-Allow-Origin'</span> header is present on the requested resource<span class=\"token punctuation\">.</span> Origin <span class=\"token string\">'http://localhost:3000'</span> is therefore not allowed access<span class=\"token punctuation\">.</span></code></pre></div>\n<p>You might be thinking to yourself, I have an API key, why isn’t my code working? And the answer is, it is. If you take the same URL, with the parameters filled in, and use something like <a href=\"https://www.postman.com/\">Postman</a>, you will get a JSON response back. Without getting too into it, the reason it is working with Postman and not your code is because of Cross-Origin Resource Sharing, better known as <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS\">CORS</a>. CORS is a server-side configuration which clients, like your browser, choose to enforce and other developments tools, like Postman, choose to not enforce.</p>\n<h2>The Solution, Kind Of</h2>\n<p>When looking online for a solution, all I found was</p>\n<blockquote>\n<p>“add an HTTP header to the server: Access-Control-Allow-Origin: *”</p>\n</blockquote>\n<p>and you’d be done. Because we want to access data from Google’s servers, we can’t add an HTTP header since it is not our server. Also adding the request headers to our fetch function will not work either because Google’s server does not allow certain methods to be called without authorization.</p>\n<h3>Installing and Using A CORS Proxy</h3>\n<p>So how do we get the response we were expecting? We use a CORS proxy! A CORS proxy will add the neccesary CORS headers to the proxied request. The proxy we will be using is <a href=\"https://github.com/Rob--W/cors-anywhere/\">CORS Anywhere</a>. Keep in mind, we will be making our own CORS proxy, so make sure you have <a href=\"https://git-scm.com/\">git</a> and <a href=\"https://devcenter.heroku.com/articles/heroku-cli_\">heroku cli</a> installed. Once installed follow these instructions:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">git clone https<span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>github<span class=\"token punctuation\">.</span>com<span class=\"token operator\">/</span>Rob<span class=\"token operator\">--</span><span class=\"token constant\">W</span><span class=\"token operator\">/</span>cors<span class=\"token operator\">-</span>anywhere<span class=\"token punctuation\">.</span>git\r\ncd cors<span class=\"token operator\">-</span>anywhere<span class=\"token operator\">/</span>\r\nnpm install\r\nheroku create\r\ngit push heroku master</code></pre></div>\n<p>Once done, your new heroku project will be running and you will be using the url it is being hosted on.\r\nIt should look like this:</p>\n<p><em>This is only an example, do not use this URL. Use your own.</em></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token literal-property property\">https</span><span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">cryptic-headland-94862.herokuapp.com</span><span class=\"token regex-delimiter\">/</span></span></code></pre></div>\n<p>You will need this URL to be appended to the request URL, and then making the GET request on that new URL.\r\nIt will looks like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token literal-property property\">https</span><span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>cryptic<span class=\"token operator\">-</span>headland<span class=\"token operator\">-</span><span class=\"token number\">94862</span><span class=\"token punctuation\">.</span>herokuapp<span class=\"token punctuation\">.</span>com<span class=\"token operator\">/</span>https<span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>maps<span class=\"token punctuation\">.</span>googleapis<span class=\"token punctuation\">.</span>com<span class=\"token operator\">/</span>maps<span class=\"token operator\">/</span>api<span class=\"token operator\">/</span>place<span class=\"token operator\">/</span>details<span class=\"token operator\">/</span>json<span class=\"token operator\">?</span>place_id<span class=\"token operator\">=</span><span class=\"token constant\">PLACE_ID</span><span class=\"token operator\">&amp;</span>key<span class=\"token operator\">=</span><span class=\"token constant\">YOUR_API_KEY</span></code></pre></div>\n<p>This doesn’t look great, but we can always seperate them and append them later.</p>\n<p>The final result should look something like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">\r\n<span class=\"token operator\">...</span>\r\n\r\n<span class=\"token keyword\">const</span> <span class=\"token constant\">CORS_PROXY_URL</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"https://cryptic-headland-94862.herokuapp.com/\"</span>\r\n<span class=\"token keyword\">const</span> <span class=\"token constant\">GOOGLE_URL</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"https://maps.googleapis.com/maps/api/place/details/json?place_id=PLACE_ID&amp;key=YOUR_API_KEY\"</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Reviews</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>isLoading<span class=\"token punctuation\">,</span> setIsLoading<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>data<span class=\"token punctuation\">,</span> setData<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token function\">getReviews</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getReviews</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token constant\">CORS_PROXY_URL</span> <span class=\"token operator\">+</span> <span class=\"token constant\">GOOGLE_URL</span><span class=\"token punctuation\">)</span>\r\n      <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\r\n      <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n        <span class=\"token function\">setData</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token function\">setIsLoading</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\r\n      <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"An Error Occured: \"</span> <span class=\"token operator\">+</span> error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\r\n\r\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\r\n    <span class=\"token operator\">...</span>\r\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Reviews<span class=\"token punctuation\">;</span></code></pre></div>\n<p>If you’re having trouble installing and setting up your own CORS proxy, or want a better understanding on what is happening, please refer to a great explanation <a href=\"https://stackoverflow.com/questions/43871637/no-access-control-allow-origin-header-is-present-on-the-requested-resource-whe/43881141#43881141\">here</a>.</p>\n<h2>Limitations &#x26; Conclusion</h2>\n<p>Great! Now we have a JSON response on our browser and can work with the data the way we want to. Are we done? Maybe. A CORS proxy is a great tool to use when you need access to JSON data on the fly. Should you deploy your application using a CORS proxy? That depends on what your use case is. You should only be using a CORS proxy you trust. You also shouldn’t be using a CORS proxy if you requesting private data through HTTP responses. You can find more out about the downsides of using a CORS proxy <a href=\"https://httptoolkit.tech/blog/cors-proxies/\">here</a>.</p>\n<p>Thank you for checking out what I had to say. I hope this blog post gave you a little more insight on CORS proxies and what they can do.</p>","frontmatter":{"title":"Retrieving Reviews Using The Google Places API","date":"March 08, 2022","description":"A simple explanation on how I managed to retrieve reviews using Google API and the obstacles I encountered, using React.js."}},"previous":null,"next":{"fields":{"slug":"/my-second-post/"},"frontmatter":{"title":"Introduction To Git, Basics Commands, And Terminology"}}},"pageContext":{"id":"d0eecadf-0a51-5752-aaad-8719923be877","previousPostId":null,"nextPostId":"1975faf0-d0c0-533d-a992-84e5ccf6df23"}},
    "staticQueryHashes": ["230163734","3589320610"]}